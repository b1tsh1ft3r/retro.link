* Tips for creating multiplayer games

First and foremost I am by no means any expert on this topic, however I have spent
quite a bit of time testing and developing code in C and assembly to see what methods
work best. This document is a guide to help explain what is needed from a bird's
eye view to add networking/multiplayer support to existing games or new homebrew
titles on the sega genesis. This potentially applies to other platforms as well.

* Identification
First off, you'll need to have an ID for each console that is unique. I generally
choose a single byte value and call it M for master or S for slave. It could also
be a numeric value if you are connecting to a server and multiple players are playing
rather than just a player vs player scenario (head to head / peer to peer). This is needed
because you need to know what to do with data when receiving it (where it is stored)
and also what to send off. Generally the master is player 1 and slave is player 2 in most
2 player game scenarios.

* Preparation

If you're adding networking code to a homebrew, this process is MUCH more simplified because
you can add the code where it is needed on the fly. For rom hacking this is a much more 
difficult process and much more complicated.

Rom hacking is a very deep topic and requires a lot of knowledge of the hardware and its registers.
you'll need to disassemble the game and use hardware addresses to track down things like 
joypad reading functions, interrupt vectors, and then track down game variables in ram, main game 
loop, title loop, and character select main loop functions to patch in your networking calls. 

A general good rule of thumb is to prep and establish communications before input heavy
parts of the game like the title screen, character select, or gameplay. You'll want to 
determine latency between machines, and also synchronize them to start into the game code
at the same time on both sides. All of this highly depends upon the type of game you're 
adding network code to and what approach you take. There isn't a silver bullet for all games.

For example, a fighting game would ideally send joypad inputs back and fourth for quick
response. However this isn't enough in most cases to make the game stay 'synchronized'.
Realistically we're duplicating the same thing on two different pieces of hardware and
the timing between them can drift or be out of sync. Also random number generators used
in gameplay can be super evil and can fight you every step of the way to keep the games
duplicating the same thing on both ends over a variable speed connection (internet).

One way you can help keep them running/rendering synchronized is by using data from the 
HVCounter. This data is a word at $C00008 on the sega genesis. The vertical counter is what
we're particularly interested in however which is a byte at $C00009, but we can't read from 
$C00009 directly. Read a word of data from $C00008 and isolate it to get the vertical count.

    MOVE.W  $C00008,D0            ; Get HVCounter value to D0
    LSR.W   #8,D0                 ; Shift over to point to vcounter value (byte)

We send the vertical counter value byte from one machine to the other. Once received you can 
compare the received remote value versus the local vertical count value and then switch 
the video mode to interlaced to cause the screen refresh to take longer on one machine that is
running faster to slow it down. Keep in mind you'll want to adjust for the time it takes to 
send that vertical count value byte from one machine to the other (latency). 

This concept was originally coined by the guys at Catapult working on Xband initially as a 
way to 'abuse' the hardware to control it so to speak. Hats off to them for a creative solution
to a very tough problem!

With this in mind you are sending a vertical count value, probably a word value (2 bytes)
of joystick data for a total of 3 bytes so far. The joystick data may also need to be
put into a local buffer that the main game loop draws off of to use for the current game frame.
This highly depends on how your game is structured and built, so there isnt a one-size fits
all process for this. Generally the buffer should be the size of the one way latency value to the
other console and depending on what other tricks you want to add, this is where you would add rollback
or other code to compensate for missed data that frame and whatnot. This topic is VERY deep and is 
best left explored independently on methods to use.

Other games can get by with just transmitting the x/y position of a player and the inputs and a few
other variables and be just fine. For example a 3D shooter game like Bloodshot/BattleFrenzy
on the Sega Genesis only requires sending the player position in the map and joypad inputs.
Synchoronization of the game using the vertical counter here isn't needed aside from getting into the
game at the same exact time on both consoles (synchronized start). Whenever the data arrives from one 
console to the other it sets the player position to the current spot rather than multiple packets of 
joypad data to replay the action and duplicate the outcome. Even though we are using TCP on the Retro.Link
to ensure data arrives and in the right order, it can be delayed up to 500ms which can wreak havoc if your
code isn't accounting for lost or late data.

* Establishing communication
You'll probably want a function that will establish communication between
both consoles. This is used to see if the other machine is there on the 'line' even though 
you've  already made the connection. 

I generally send a single byte value in a loop at a 1 second interval roughly waiting
for a reply until a timeout is reached. If there is no timeout, i make a variable with
a byte value like 0x21. This is '!' in ASCII. I then send this to the other console and
wait for it to be echoed back. When I receive the byte, I then check to see if it is what
I initially sent. If all is well, then we add 1 to the variable we're sending to increment 
the value and do it again in a loop for as many times as we want to, until we deem that the 
transmit/receive of data is working properly. 16-32 bytes sent and echo'd back is probably fine.

* Determining latency
This is a bit more difficult of an operation because it highly depends on the method
that you are going to use for networking your game. Generally this function is called from mainline
code and NOT in an interrupt, BUT we do need interrupts running and with an increasing vertical
counter value from the vblank. Most games have this anyway. Before sending a byte to the remote
console we will clear the vertical blank counter value to zero and then send a byte of your choice
The other console will receive this and echo it back immediately. Its probably a good idea for the
other console that echos the reply to NOT have interrupts running so that there is no chance the 
interrupt will come in and delay the immediate echo reply process.

Once the byte comes back to the console that sent it, we grab the vblank counter value immediately.
This is our rountrip latency value in vertical blank counts. From here we cut this in half to get
one way latency. Ideally you would do this a bunch of times and store them into an array
and sort for the largest value which would be your safe latency value to use for a delayed input
buffer for joystick data if the game is sending only joystick data and vertical counter values.

* Synchronization
This is simply done by synchronizing the vertical count values as mentioned above. Once they are within
1-2 of each other this is considered synchronized. The master console will send a "start" byte to the slave
console and then wait the number of frames for 1 way latency before exiting the synchronize function.
The slave console on the other hand however will wait until the start byte shows up and when it does
it will immediately exit the synchronize function and both consoles will start into code execution 1-2
vertical counts apart. 

* Putting it together
From intro screens to a title screen you would probably want your code to look something like this
or a variation of it. 

INTRO:
	; Render intro screens

TITLE_SETUP:
	; Load graphics
	; set variables

	Clear_Buffers();          // Clear fifos/buffers before we start
	Establish_Comms();        // find/talk to other console
	Get_Latency();            // figure out our network latency between both consoles
	Synchronize();            // synchronize vertical counter values

	// fall into code below

TITLE_SCREEN_LOOP:
  READ_JOYPADS();
	Networking();

We receive and send our network data AFTER reading local joypads on the machine so we can manipulate the
values and store received values. It is also a good idea if you are the slave console to read from joystick
port 1 but store the data in the player 2 input variable so that players don't have to physically plug their
controller into another controller port other than the first one. 

The above pseudo code concept also applies for transitions into gameplay or character select scenes or 
anything that requires player input. Be sure to clear fifos/buffers before all of this to avoid unforseen issues.

* In closing
Thanks for reading. While this isnt a comprehensive guide, it shows a few tips learned over time while
developing the hardware and attempting to add code to existing games and even new homebrew games. 

If you'd like to add information you feel is relevant and important to the process that should be known
feel free to reach out on discord!








